// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "github.com/yossdev/mypoints-rest-api/src/transactions/entities"

	uuid "github.com/google/uuid"
)

// PsqlRepository is an autogenerated mock type for the PsqlRepository type
type PsqlRepository struct {
	mock.Mock
}

// CreateClaims provides a mock function with given fields: payload
func (_m *PsqlRepository) CreateClaims(payload entities.Domain) (int64, error) {
	ret := _m.Called(payload)

	var r0 int64
	if rf, ok := ret.Get(0).(func(entities.Domain) int64); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Domain) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRedeem provides a mock function with given fields: payload
func (_m *PsqlRepository) CreateRedeem(payload entities.Domain) (int64, error) {
	ret := _m.Called(payload)

	var r0 int64
	if rf, ok := ret.Get(0).(func(entities.Domain) int64); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Domain) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: id
func (_m *PsqlRepository) GetTransaction(id string) (entities.Domain, error) {
	ret := _m.Called(id)

	var r0 entities.Domain
	if rf, ok := ret.Get(0).(func(string) entities.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClaimsStatus provides a mock function with given fields: id, status
func (_m *PsqlRepository) UpdateClaimsStatus(id uuid.UUID, status string) (int64, error) {
	ret := _m.Called(id, status)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) int64); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRedeemStatus provides a mock function with given fields: id, status
func (_m *PsqlRepository) UpdateRedeemStatus(id string, status string) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
