{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is an auto-generated API Docs.",
        "title": "MyPoints API",
        "termsOfService": "https://swagger.io/terms/",
        "contact": {
            "name": "MyPoints Team Support",
            "email": "zenhanprogram@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "server.mypoints.site",
    "basePath": "/api/v1",
    "paths": {
        "/admin/login": {
            "post": {
                "description": "check admins by checking given email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "check admins by given email return jwt token if successfully signIn",
                "parameters": [
                    {
                        "description": "body request",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.SignInReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/admin/profile/avatar/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update admin photo profile by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "update admin photo profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateAvatar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.UpdateAvatar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.AccountUpdated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/admin/profile/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update admin data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "update admin data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.UpdateAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.AccountUpdated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/admin/signup": {
            "post": {
                "description": "create admin account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "admins can create from register page",
                "parameters": [
                    {
                        "description": "body request",
                        "name": "signUp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.SignUpReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_admins_dto.AccountCreated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/admin/{id}/transactions/claims": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update claims transaction status by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "admins can update claims transaction from agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateClaims",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateClaimsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "check agent by checking given email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "summary": "check agent by given email return jwt token if successfully signIn",
                "parameters": [
                    {
                        "description": "body request",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.SignInReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "create product by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "admins can create product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "newProduct",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewProduct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/product/{id}/{productId}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update product data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "update product data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of Product",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateProduct",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "soft delete product data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "soft delete product data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of Product",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/profile/avatar/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update agent photo profile by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "summary": "update agent photo profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateAvatar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.UpdateAvatar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.AccountUpdated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/profile/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get agent data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "summary": "get agent data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Profile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update agent data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "summary": "update agent data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.UpdateAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.AccountUpdated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/redeem/callback": {
            "post": {
                "description": "callback for invoice xendit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "callback endpoint",
                "parameters": [
                    {
                        "description": "body request",
                        "name": "invoiceCallback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.InvoiceCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reward/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "create reward by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reward"
                ],
                "summary": "admins can create reward",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "newReward",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewReward"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RewardRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/reward/{id}/{rewardId}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update reward data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reward"
                ],
                "summary": "update reward data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of Reward",
                        "name": "rewardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateReward",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateReward"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RewardRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "soft delete reward data by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reward"
                ],
                "summary": "soft delete reward data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of Reward",
                        "name": "rewardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RewardRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/{adminId}/agent": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "create agent account by admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "summary": "admins can create agent account with this api",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "adminId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "signUp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.SignUpReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.AccountCreated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/{adminId}/agent/update": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "update agent data by admin with agent id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "summary": "update agent data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Admin",
                        "name": "adminId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "updateAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAgentByAdmin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github.com_yossdev_mypoints-rest-api_src_agents_dto.AccountUpdated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/{id}/transactions/claims": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "create claims transaction by agents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "agent can create claims transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "newClaims",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ClaimsReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        },
        "/{id}/transactions/redeem": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "create redeem transaction by agents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "agent can create redeem transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of Agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body request",
                        "name": "newRedeem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RedeemReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Token": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.ClaimsReq": {
            "type": "object",
            "required": [
                "agent_id",
                "nota_img",
                "points",
                "product_id",
                "title"
            ],
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "nota_img": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.InvoiceCallback": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "merchant_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.NewProduct": {
            "type": "object",
            "required": [
                "admin_id",
                "points",
                "title"
            ],
            "properties": {
                "admin_id": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.NewReward": {
            "type": "object",
            "required": [
                "admin_id",
                "category",
                "points",
                "title",
                "value"
            ],
            "properties": {
                "admin_id": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "dto.ProductRes": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "dto.Profile": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "admin_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Transactions []_transaction.Domain `json:\"transactions\"`",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.RedeemReq": {
            "type": "object",
            "required": [
                "agent_id",
                "points",
                "redeem_desc",
                "reward_id",
                "title"
            ],
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "redeem_desc": {
                    "type": "string"
                },
                "reward_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.RewardRes": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "dto.TransactionRes": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateAgentByAdmin": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateClaimsReq": {
            "type": "object",
            "required": [
                "id",
                "status"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateProduct": {
            "type": "object",
            "required": [
                "points",
                "title"
            ],
            "properties": {
                "img": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateReward": {
            "type": "object",
            "required": [
                "category",
                "points",
                "title",
                "value"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_admins_dto.AccountCreated": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_admins_dto.AccountUpdated": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_admins_dto.SignInReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_admins_dto.SignUpReq": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_admins_dto.UpdateAccount": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_admins_dto.UpdateAvatar": {
            "type": "object",
            "required": [
                "img"
            ],
            "properties": {
                "img": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_agents_dto.AccountCreated": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_agents_dto.AccountUpdated": {
            "type": "object",
            "properties": {
                "rows_affected": {
                    "type": "integer"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_agents_dto.SignInReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_agents_dto.SignUpReq": {
            "type": "object",
            "required": [
                "admin_id",
                "email",
                "name",
                "password"
            ],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "admin_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_agents_dto.UpdateAccount": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github.com_yossdev_mypoints-rest-api_src_agents_dto.UpdateAvatar": {
            "type": "object",
            "required": [
                "img"
            ],
            "properties": {
                "img": {
                    "type": "string"
                }
            }
        },
        "web.ErrorResp": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}